When would you want to use a remote repository rather than keeping all your work
local?

Keeping data in multiple locations is a good redundancy measure (if redundancy
is the right term). If, for example, something happened to the local work and it
got corrupted, deleted, or otherwise lost, then it could be restrieved from the
remote repository.


Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

Pulling changes automatically may make changes to the local repository while
work is still being done.  Manually pulling, say, after work is finished or
before it starts would be better.


Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

A branch is an isolated environment with its own commits within the repository.
Branches are useful for creating alternate versions of the project, do
experiments that do not affect the main project, create new features to be added
to the project later, bug fixes, and many others.

Cloning is the process of copying a remote repository to the local machine and
automatically adding a remote.  However, it may not necessarily be possible to
contribute back to the remote unless explicitly declared as a contributor.

A fork is a complete copy of a repository.  However, this copy is usually placed
in a different location in addition to the local machine.  With GitHub, forking
copies the repository from another GitHub account to yours, but also adds some
links back to the original project.  Unlike cloning, the programmer is free to
push commits upstream to the fork.  A fork could be used to take an existing
project and move it in an entirely different development direction from the
original.


What is the benefit of having a copy of the last known state of the remote
stored locally?

All the most recent changes, additions, etc, will be present.  Therefore, when
being away from an internet connection or some other similar situation, the
programmer will have the most recent versions of the repository to work with.


How would you collaborate without using Git or Github?  What would be easier,
and what would be harder?

I have spent a very long time working without Git or Github and it has been
difficult.  Collaboration is very possible, but frequently problematic.
Comparing code, doing diffs basically, is impossible without diff or git,
especially on Windows which doesn't have anything built in.  Most of my prior
experience is on Windows.

[Side note, I'll just say that I am so happy that I discovered Linux, and the
rest of the UNIX multiverse.  It may be the best thing to ever happen to me or
the best thing I've ever done.] 

Collaboration was basically passing around zip files.  There was no way to
easily or efficently check diffs.  Everything that I've learned in this course
I've managed to do without it for years, but it was difficult to say the least.

At the start of the course, either Sarah or Caroline said something to the
effect of that git is difficult at first, but once you get used to it.  They're
wrong.  I picked it up reasonably quickly.  Well, quicker than I've learned many
other things.  Now that I have learned this, there is no going back to working
without it!  I'll never work without git or some other version control system
ever! 
